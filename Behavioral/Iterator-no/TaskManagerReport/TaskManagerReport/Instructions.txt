Hablaremos sobre el patron iterador, y profundizaremos en su implementación en C# y ampliaremos la info para hablar de LINQ  y algún tópico Avanzado….
 
Patrón Iterador
 
(de la wiki )
En diseño de software, el patrón de diseño Iterador, define una interfaz que declara los métodos necesarios para acceder secuencialmente a un grupo de objetos de una colección. Algunos de los métodos que podemos definir en la interfaz Iterador son:
 
Primero(), Siguiente(), HayMas() y ElementoActual().
Este patrón de diseño permite recorrer una estructura de datos sin que sea necesario conocer la estructura interna de la misma.
 
Ejercicio
 
Partiendo de una lista de objetos de la estructura de proyecto de ejercicios anteriores (epic, feature, userstory, task):
 
 
•           Epic1 (Presupuesto 100€)
            o          Feature1 (Equipo Warrior)
                        -           US1 (5 p)
                                    •           T1 (4h)
                        -           US2 (3p)
                                    •           T2 (3h)
 
 
(... y muchas mas, supongamos que la lista tiene diez EPICS)
 
 
Nos piden que desarrollemos dos funcionalidades:
 
1) Mostrar un listado por consola que muestre un listado de tuplas (Nombre equipo, total de horas), siendo el total de horas de un equipo la suma de todas las horas de tareas de features.
 
Ejemplo: 
 
equipo|horas
--------------------
Warriors|7h
Vikings|10h
Jedi|20h
BlackOps|5h
 
2) Mostrar un listado plano de tuplas (equipo, userstory, HORAS de sus tareas):
 
equipo|us|horas
-----------------
warriors|US1|4h
warriors|US2|3h
vikings|US3|4h
vikings|US4|6h
...
 
Nos han dicho que la estructura que almacena la lista de epics podría ser un array o una lista encadenada. El código desarrollado debe ser compatible con ambas implementaciones.


            //http://best-practice-software-engineering.ifs.tuwien.ac.at/patterns/iterator.html
            //http://www.primaryobjects.com/2008/01/29/using-the-iterator-pattern-in-c-asp-net/
--------------------------------------------------
--------------Visitorrr---------------------------
--------------------------------------------------
De la Wiki: 
Propósito

Es un patrón de comportamiento, que permite definir una operación sobre objetos de una jerarquía de clases sin modificar las clases sobre las que opera. Representa una operación que se realiza sobre los elementos que conforman la estructura de un objeto.

Vamos hablando en plata, este patrón permite poner el código de una clase o conjunto de clases en otro sitio, separación de conceptos.
Es un patrón que solo he usado una vez en producción, pero es más debido a que es una forma distinta de organizar el código que la que estamos acostumbrados. En otros paradigmas es tan habitual que ni lo nombran, se da por hecho.

El ejercicio.

Tenemos las clases del ejercicio anterior Task, UserHistory, Feature, Epic, y Bug. Les añadiremos un par de campos únicos a cada clase. Las Epic tendrán presupuesto, las features el equipo que las hace, las User History putos de historia, y las Task horas que se han tardado, de los bugs pasamos
Suponiendo la siguiente estructura

•	Epic1 (Presupuesto 100€)
    o	Feature1 (Equipo Warrior)
        	US1 (5 p)
            •	T1 (4h)
        	US2 (3p)
            •	T2 (3h)

Pasada una lista de Epics devuelva un informe en modo texto

Estado del proyecto a xx/xx/xx
======
Epic1
======
FEATURE 1  by Warriors
            * US1 (5p)
                        - T1 [4h]
            * US2 (3p)
                        - T2 [3h]


Opcional: Hacer otro informe pero en vez de en texto que sea un json.
{
type:”epic”,
description: “Epic1”,
features: [
            {type:”feature”,
            description: “Feature1”,
            By: “Warriors”,
            UserHistories: [{
                    type:”UserHistory”,
                    description: “US1”,
                    historyPoints: 5
                    tasks:[
                            {
                            type:”Task”,
                            description: “T1”,
                            hours4
                            }
                          ]
                    }
                    {
                    type:”UserHistory”,
                    description: “US2”,
                    historyPoints: 3
                    tasks:[
                            {
                            type:”Task”,
                            description: “T2”,
                            hours3
                            }
                            ]
            }


            ]
    }
    ]

}

http://dotnetpattern.com/visitor-design-pattern
          //https://www.codeproject.com/Articles/588882/TheplusVisitorplusPatternplusExplained
            //https://oncodedesign.com/the-visitor-pattern-a-better-implementation/